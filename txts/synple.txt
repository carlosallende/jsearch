Synple User’s Guide
C. Allende Prieto, I. Hubeny, T. Lanz, Y. M. Osorio
November 10, 2022
Synple is a Python interface to the spectral synthesis code Synspec and a set of related utilities.
Synple can compute emerging spectra from LTE Kurucz, MARCS, Phoenix or Tlusty model atmospheres,
as well as NLTE Tlusty models. Appropriate default choices for the continuum and line opacities are
provided, while the chemical abundances and micro-turbulence velocity are taken from the input model
atmospheres, but can be changed as needed.

Contents
1 Introduction

2

2 Installing

2

3 Examples
3.1 Computing your first solar spectrum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2 Altering micro-turbulence and chemical composition . . . . . . . . . . . . . . . . . . . . .
3.3 Additional line broadening . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.4 Multiple models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2
3
4
5
7

4 References

8

1

1

Introduction

The computation of detailed stellar stellar spectra is a basic but important step required for the analysis
of star light, spectra of integrated stellar populations, or transiting planets. The calculations involve
solving the equation of radiative transfer
Z π
dIν (θ)
Iν (θ′ )φ(θ′ ) sin θ′ dθ′ ,
(1)
= ην − κν Iν (θ) +
cos θ
dz
0
where Iν is the specific intensity, and describes the radiation field (radiative energy per unit of frequency
propagating at an angle θ from the vertical traversing a unit area per unit time), κ is the opacity (fraction
of energy absorbed per unit length), η the emissivity (energy emited, same units as the intensity) and φ
represents the scattering function (photons scattered from the direction θ’ into the direction θ.
Once Iν (θ) is known, it can be integrated to derive the stellar flux
Z π
Iν (θ) cos θ sin θdθ
(2)
Hν =
0

which can be finally convolved with various kernels that describe large-scale atmospheric turbulence,
rotation, or the instrumental profile.
Prior to solving the equation of radiative transfer, one requires a physical model of the stellar atmosphere in order to compute η, κ and φ. This is the running of the thermodynamical quantities (e.g
temperature and density) with height, as well as the chemical composition. This input model atmosphere
is the sole required input to Synple. Of course, computing a detailed spectrum requires fundamental physical data on the interaction of matter and radiation (photoionization cross-sections, atomic and molecular
transition probabilities and damping constants, etc), but a generic collection of such data is bundled with
Synspec.
Multiple codes for radiative transfer exist and are publicly available. However, most require deep
knowledge of the related physics and are cumbersome to use. Synple provides an easy-to-use Python
interface for the fast computation of model stellar spectra with accuracy and flexibility.

2

Installing

Synple is hosted in github at https://github.com/callendeprieto/synple and can be obtained using git
git clone https://github.com/callendeprieto/synple synple
or by downloading a zip file from the website.
Your Python (3.x) installation will require the packages subprocess, numpy, and scipy, usually
obtained with pip (e.g. pip3 install numpy). You probably want to install ipython and matplotlib as
well, since we will be using that in the examples below.
The installation requires a FORTRAN compiler, and the GNU compiler is used by default
cd synple/synspec ; make clean; make; cd ../...
The atomic and molecular line lists are sizable and need to be downloaded separately
cd synple/linelists ; make clean; make; cd ../..
where the automated download requires that wget is available in your system, otherwise download the
line lists manually from
ftp://carlos:allende@ftp.ll.iac.es/linelists and copy them to the synple/linelists directory. For
speed the linelists are converted to binary format by the same (make) script.
You need to make synple visible to Python by including the synple directory in your PYTHONPATH
variable. Say you’ve placed the synple parent directory in your home, then you can add it in the linux
shell by typing (or including in your .bashrc or .cshrc files)
bash:
csh:

3

export PYTHONPATH=”$PYTHONPATH:$HOME/synple”
setenv PYTHONPATH = ”$PYTHONPATH:$HOME/synple” .

Examples

Once synple is installed, all you need is a model atmosphere to being using it. In this section we’ll
include a set of simple practical examples, mainly based on the three model atmospheres included in
the synple/models directory: one is a solar Kurucz model (’ksun.mod’), one is a solar MARCS model
(’msun.mod’), and the third is a Phoenix model for Vega-like A-type star (’lte09600-4.00-0.0.PHOENIXACES-AGSS-COND-2011.ATMOS.fits’) from Huser et al. (20xx).
2

1.0

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2
6160.0 6160.5 6161.0 6161.5 6162.0 6162.5 6163.0 6163.5 6164.0

Figure 1: Here’s your first spectrum with synple. You have modeled the solar spectrum in the vicinity
of the Ca I λ6162 line. The Ca I line is the strong line at the center, visibly damped by collisions with
hydrogen atoms.

3.1

Computing your first solar spectrum

For this exercise we’ll use the Kurucz solar model included with synple. We’re going to compute a piece
of the spectrum around the Ca I λ6162 line. We start ipython and import the standard synthesis routine
syn from synple
$ ipython
Python 3.6.8 (default, Jan 14 2019, 11:02:34)
Type ’copyright’, ’credits’ or ’license’ for more information
IPython 7.4.0 -- An enhanced Interactive Python. Type ’?’ for help.
In [1]:

from synple import syn

then request the computation of the spectrum from the model atmosphere in the file ksun.mod between
6160 and 6164 Å
In [2]: wave, flux, cont = syn(’ksun.mod’, (6160,6164) )
teff,logg,vmicro= 5777.0 4.437 2.0
syn ellapsed time 48.8003294467926 seconds
We’ve got it! The routine syn returns three numpy arrays with the wavelengths (wave), the fluxes (flux;
Hλ ), and the continuum flux (cont). If we wish to visualize the continuum-normalized spectrum, we can
use matplotlib
In [3]: pylab
Using matplotlib backend: TkAgg
Populating the interactive namespace from numpy and matplotlib
In [4]:

plot(wave,flux/cont)

and that’s it! You should be looking at your first computed spectrum and it should look like the one in Fig.
3

1.0

1.0

0.9

0.9

0.8

0.8

0.7

0.7

0.6

0.6

0.5

0.5

0.4

0.4

0.3

0.3

0.2

0.2
6160.0 6160.5 6161.0 6161.5 6162.0 6162.5 6163.0 6163.5 6164.0

6160.0 6160.5 6161.0 6161.5 6162.0 6162.5 6163.0 6163.5 6164.0

Figure 2: Repeating the calculation in Fig 3.1 (blue) but adding a second curve (orange) on the left
panel reducing the micro-turbulence from 2 to 1 km s−1 , and on the right-hand panel increasen the Ca
abundance by 0.2 dex.
1. In addition to the run with height of the thermodyanical quantities, the model atmosphere contains
a detailed description of the chemical abundances and the micro-turbulence velocity (see below). These
parameters are simply adopted from the model atmosphere, but can be changed if needed, as described
in the next section.

3.2

Altering micro-turbulence and chemical composition

The model atmospheres we deal with are in hydrostatic equilibrium, and therefore pressure and gravity are
in balance, so everything is at rest. This is unrealistic. Real stellar atmospheres have turbulence, shocks,
convection, meridional circulation, etc. Thus, the computed line profiles are narrower than observed.
One of the patches to address this problem is the so-called micro-turbulence velocity, which accounts for
small-scale velocities of the absorbing particles. This includes small scale turbulence, and needs to be
included in the computation of the linel absorption profile at the microscopic level, before solving the
radiative transfer equation.
Synple includes micro-turbulence in the spectrum calculations automatically, if that’s indicated in
the model atmosphere file, but that value can be overridden by explicitly indicating it when calling the
synthesis routine syn using the parameter vmicro.
Let’s repeat the example in §3.1 changing the micro-turbulence from the value used to construct the
solar Kurucz model we used, 2 km s−1 , to a more reasonable value for a solar-like star of 1 km s−1
In [5]: wave2, flux2, cont2 = syn(’ksun.mod’, (6160,6164), vmicro = 1.
teff,logg,vmicro= 5777.0 4.437 1.0

)

which can be easily compared with the previous calculation
In [6]:

plot(wave2,flux2/cont2)

as illustrated in the left-hand panel of Fig. 2. The weak, unsaturated, lines, and the core of the strong Ca
I λ6162 line, are less broadened (brown curve) after reducing the micro-turbulence, while the damping
wings of strong lines are insensitive to this parameter.
Similarly to the micro-turbulence, the chemical abundances can be changed from those used in the
construction of the model atmosphere when computing the detailed spectrum. Since the most direct effect
of the change of the abundance of an element (other than hydrogen) in the atmosphere is on the strength of
its spectral lines, this is usually a good approximation for most elements and for reasonably small changes
in abundances. But many elements, especially the most abundant ones, affect the thermodynamics of
the atmosphere, and therefore for those elements this is a risky approximation to make. On the other
hand, the approximation is very good for trace elements.
To supersede the abundances in the model atmosphere we can call syn with the keyword abu. The
abundances are expressed as the number density of nucleii of the elements relative to that of hydrogen
ǫ(X) =

N (X)
.
N (H)

(3)

Let’s read the ones in the model atmosphere and then increase the calcium abundance by 50% (0.2 dex)
4

1.0

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2
6160.0 6160.5 6161.0 6161.5 6162.0 6162.5 6163.0 6163.5 6164.0

Figure 3: Repeating the calculation in Fig 3.1 (blue) but adding the result of a convolution with a
rotational profile for v sin i = 5 km s−1 (orange), a Gaussian kernel with a FWHM of 0.2 Å (green), and
both (brown).

In [7]: from synple import read model
In [8]: atmostype, teff, logg, vmicro, abu, nd, atmos = read model(’ksun.mod’)
In [9]: abu[19] = abu[19] * 1.5
In [10]: wave3, flux3, cont3 = syn(’ksun.mod’, (6160,6164), vmicro = 1. , abu=abu )
teff,logg,vmicro= 5777.0 4.437 1.0.
In [11]: clf()
In [12]: plot(wave2,flux2/cont2, wave3, flux3/cont3).
This calculation is shown in the right-hand panel of Fig. 2, and it reveals that there are three Ca I
lines in the computed spectral segment.

3.3

Additional line broadening

The spectral lines in a computed spectrum are naturally broadened due to the uncertainty principle,
micro-turbulence (see Section 3.2), the thermal velocities of the absorbing atoms and molecules, and the
collisions they suffer with surrounding free electrons and hydrogen atoms. All these broadening factors
are included in the calculations done as described in the previous exercise, but there are additional sources
of uncertainty that may be significant for your particular application.
• macro-turbulence: while the micro takes care of small-scale velocity fields by introducing broadening
at the microscopic level, broadening the line profiles at each atmospheric layer, there are velocities
on scales much larger than the photon mean free-path that need to be taken into account by
convolution of the computed spectrum. This is usually taken into account by convolving with a
Gaussian velocity kernel, or with a radian-tangencial profile (see Gray xxxx). Synple implements
convolution with a Gaussian velocity field in the routine vgconv.
• rotation: stellar rotation broadens the spectral profiles. To be exact this has to be taken into
account numerically, by Doppler-shifting the intensity contributions from different angles (θ) in
Eq. 2. Nevertheless the effect or rotation can be well approximated by a covolution of the flux

5

1.0

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2
6160.0 6160.5 6161.0 6161.5 6162.0 6162.5 6163.0 6163.5 6164.0

Figure 4: In addition to the original calculation in Fig. 3.1 (blue line), we show the result of the
convolution with a rotational profile for v sin i = 5 km s−1 and a Gaussian kernel with a FWHM of 0.2
Å using rotconvlgconv (green) and rotin (orange).
computed for no rotation with a particular kernel (see Gray xxxx). This is implemented in Synple
in the routine rotconv.
• instrumental profile: Instruments distort the stellar spectrum by convolving it with the instrumental
profile. If the resolving power is constant, this can be usually approximated as a macro-turbulence,
with a Gaussian kernel with a constant width in velocity space. Sometimes is the resolution,
the FWHM in wavelength of the response of the instrument to a monochromatic source, what is
constant, and the instrumental profile can be handle in Synple with the routine lgconv.
The following example demonstrates how to convolve with a rotational profile (vsini = 5. km s−1 ), a
Gaussian profile with a constant resolution FWHM = 0.2 Å and both, the original calculation in §3.1
In [13]:
In [14]:
In [15]:
In [16]:
In [17]:
In [18]:

from synple import rotconv, lgconv
wave2, flux2 = rotconv(wave, flux/cont, 5.)
wave3, flux3 = lgconv(wave, flux/cont, 0.2)
wave4, flux4 = lgconv(wave2, flux2, 0.2)
clf()
plot(wave, flux/cont, wave2,flux2, wave3, flux3, wave4, flux4).

Note that the spectral range of the output spectrum is truncated in wavelength, since it is computed only
for the frequencies with information in the original calculation.
These routines for convolution are directly implemented in Python. Synspec has a companion FORTRAN program that handles the convolution with the instrumental or rotational profiles: rotin. One
can use this program by including the fwhm and vrot parameters when calling syn as in the following
example
In [19]: wave2, flux2, cont2 = syn(’ksun.mod’, (6160,6164) , vrot = 5.0, fwhm = 0.2 )
In [20]: clf()
In [21]: plot(wave, flux/cont, wave2, flux2/cont2, wave4, flux4)
Note the different behaviour for rotin (orange curve in Fig. 5), which does not trim the edges of the
computed spectrum, and lgconv/rotconv (green). Rotin does not include convolution with a Gaussian
6

1.0

0.8

0.6

0.4

0.2

6160.0 6160.5 6161.0 6161.5 6162.0 6162.5 6163.0 6163.5 6164.0

Figure 5: We now use all the models in the ’modeldir’ directory in one command, with multiple values
of the micro, using multisyn.
kernel with a constant width in velocity, implemented in vgconv.

3.4

Multiple models

One often fases the need to compute the spectra for multiple models. Since the sampling of frequencies
is internally control within synspec, it become desirable to force the output fluxes to be on the same
wavelength grid, and this can be controlled with the parameter dw in the routine syn.
When using synple, by default value for the variable modeldir points to the folder models inside
you synple parent directory. If the model atmospheres are in your working directory, or as in the first
examples below, the models are in the models folder, that’s ok, but if you want to use models elsewhere
you will need to change modeldir to point to the right path (changing the source code in synple.py) or
simply passing the complete filenames, including an absolute path.
If you have a bunch of models you want to compute spectra for, or multiple values of vrot, fwhm, or
vmicro, you can wrap around the routine syn, or you can use the macro multisyn, after setting the file
names in a list like in this example
In [22]: from synple import multisyn
In [23]: import glob
In [24]: import os.path
In [25]: modeldir = "/home/callende/synple/models"
In [26]: models = glob.glob(os.path.join(modeldir,"*mod")) #get the models in a list
In [27]: wave5, flux5, cont5 = multisyn(models, (6160,6164), vmicro = [1.,2.,4.] )
In [28]: clf()
In [29]: for i in range(len(models)): plot(wave5, flux5[i,:]/cont5[i,:])

and the wavelength array will now be common to all spectra, and the flux and cont arrays returned will
be two-dimensional, with the first dimention running along the models in the input list.

7

4

References
• Allende Prieto, C., Fernández-Alvar, E., Schlesinger, K. J., et al. 2014, A&A, 568, A7

8

